□ COMBINE_ITEM (标准物件：可合并表示的物件)

有时候我们会做一些人们时常会携带量较多的物件，例如金币、飞镖、符纸等等，若
是这些物件每一个都用一个物件代表，不但浪费记忆体，而且 inventory  列出来也
会太长，因此这个标准物件被设计用来让一些携带量经常很多的物件继承。

这些逻辑上是很多个，但实际上 MudOS 只用一个物件代表的物件，外观看起来会像是

两瓶药水
十五把飞刀
一百二十两银子

换句话说，就是 <数量><单位><名称> 的格式，因为中文的语法可以很安全地依此规
律造出相当通顺的名词片语，所以你只需要正确地设定好 <单位> 跟 <名称>，<数量>
部份就由这个标准物件中的几个函数替你解决。

int query_amount()

  这个函数传回此物品逻辑上的数量，你也可以用这个函数的传回值是否大於零来判
  断一个物件是否是这类「可合并表示」的物件，query_amount()在大多数的情况下
  传回的都是一个大於等於 1 的整数，传回零的情形请见下面 set_amount()的说明
  。
 
void set_amount(int v)

  设定物件的逻辑数量，其中传入值 v 不得小於零，若等於零则物件会被用一个
  call_out 摧毁，以确保用 call_other 呼叫这个函数 return 之後，这个物件
  仍然可用，因此如果你无法确定你呼叫 set_amount() (或 add_amount()) 之後
  物件的逻辑数量不会等於零，最好呼叫後再用 query_amount() 检查一次。

  set_amount() 同时也会根据物品的逻辑数量更新它的重量，以及环境的负重。
 
void add_amount(int v) 

  改变物品的逻辑数量，v 值会被加到目前的数量上，一个常用的呼叫方式是
  add_amount(-1); 表示物品被「用掉」，一个。

□ 需要系结的函数

string short()
varargs int move(mixed dest, int silent)

Elon@ES2 (07-05-95) drafted.
Annihilator@ES2 (07/14/95) refined.

